# Правила для Cursor - SourceOfFantasy Project

## Общие принципы

1. **Структура проекта**: Это Ren'Py визуальная новелла с боевой системой
2. **Язык**: Python (для логики) + Ren'Py (для сценариев и интерфейса)
3. **Архитектура**: Модульная система с разделением логики и представления
4. **Принцип разделения**: Вся боевая логика в battle.rpy, сценарии только вызывают бой

## Архитектура проекта

### Файловая структура
- **`battle.rpy`** - Вся логика боя, функции, переменные и обработчики
- **`script.rpy`** - Сценарии игры, только вызовы `start_battle()` и переходы
- **`screens.rpy`** - Интерфейс боя
- **`tests/test_battle_renpy.py`** - Тесты боевой логики

### Принципы разделения
- Вся боевая логика в `battle.rpy`
- Сценарии только вызывают бой с указанием противника
- Интерфейс отображает состояние из `battle.rpy`
- Тесты копируют логику из `battle.rpy`

## Стиль кода

### Python код (battle.rpy, тесты)
- Используйте snake_case для переменных и функций
- Добавляйте комментарии на русском языке
- Группируйте связанные функции вместе
- Используйте глобальные переменные для состояния боя

### Ren'Py код (script.rpy, screens.rpy)
- Следуйте стандартам Ren'Py
- Используйте русский язык для текста и комментариев
- Группируйте label'ы логически
- Используйте python блоки для сложной логики

## Боевая система

### Переменные
- Все переменные боя должны иметь префикс `player_` или `enemy_`
- Максимальные значения: `*_max_hp`, `*_max_mp`
- Статусы: `*_blood_overflow`, `*_mana_overflow`

### Функции
- **start_battle(enemy_type)** - инициализация боя с указанным противником
- Каждое действие игрока: `player_*()`
- Действия противника: `enemy_turn()`
- Утилиты: `add_health()`, `add_mana()`, `apply_overflow_effects()`, `check_overflow_status()`

### Типы противников
- **goblin** - Гоблин (HP: 5/5, MP: 3/3)
- **orc** - Орк (HP: 8/8, MP: 2/2)
- **troll** - Тролль (HP: 12/12, MP: 1/1)

### Тестирование
- Все тесты в папке `tests/`
- Копируйте логику из battle.rpy в тесты
- Тестируйте каждый аспект боевой системы
- Добавляйте интеграционные тесты
- Тестируйте функцию start_battle с разными противниками

## Документация

### Техническое задание
- Обновляйте соответствующий файл документации при изменении логики:
- `documentation/battle_system_specification.md` - для боевой системы
- `documentation/seduction_system_specification.md` - для системы соблазнения
- `documentation/inventory_system_specification.md` - для инвентаря
- `documentation/progression_system_specification.md` - для прогрессии
- `documentation/architecture_guide.md` - для архитектурных изменений
- `documentation/systems_overview.md` - для общих изменений систем
- Описывайте все переменные, функции и их поведение
- Включайте примеры использования
- Документируйте архитектуру и принципы разделения

### Комментарии в коде
- Объясняйте сложную логику
- Описывайте условия активации/снятия статусов
- Комментируйте неочевидные решения

## Рабочий процесс

### При изменении боевой логики
1. Обновите `battle.rpy`
2. Обновите тесты в `tests/test_battle_renpy.py`
3. Обновите `documentation/battle_system_specification.md`
4. Запустите все тесты
5. Проверьте интерфейс в `screens.rpy`

### При добавлении новых механик
1. Добавьте переменные в соответствующий файл системы
2. Создайте функции для новой механики
3. Добавьте обработчики в соответствующий файл (если нужно)
4. Обновите интерфейс в `screens.rpy`
5. Напишите тесты
6. Обновите соответствующую документацию:
- Боевая система → `documentation/battle_system_specification.md`
- Соблазнение → `documentation/seduction_system_specification.md`
- Инвентарь → `documentation/inventory_system_specification.md`
- Прогрессия → `documentation/progression_system_specification.md`

### При добавлении новых противников
1. Добавьте новый тип в функцию `start_battle()` в `battle.rpy`
2. Добавьте label для сцены в `script.rpy`
3. Напишите тесты для нового противника
4. Обновите `documentation/battle_system_specification.md`

## Файловая структура

```
SourceOfFantasy/
├── .cursor/           # Правила для Cursor
├── documentation/     # Техническая документация
├── game/             # Основной код игры
│   ├── battle.rpy    # Боевая логика (ВСЯ)
│   ├── script.rpy    # Сценарии (только вызовы)
│   └── screens.rpy   # Интерфейс
├── tests/            # Тесты
└── run_tests.bat     # Скрипт запуска тестов
```

## Специфичные правила

### Статусы переполнения
- Статус активируется при превышении максимального значения
- Эффект применяется каждый ход
- Статус снимается только когда значение ≤ максимуму
- Может занять несколько ходов для снятия

### Безопасность
- Все изменения HP/MP через специальные функции
- Проверяйте граничные условия
- Не допускайте отрицательных значений

### Производительность
- Избегайте избыточных вычислений
- Кэшируйте результаты где возможно
- Оптимизируйте циклы в тестах

## Контекст проекта

Это визуальная новелла с пошаговой боевой системой. Игрок сражается с противником, используя различные действия (атака, защита, щит, лечение). Система включает механику переполнения здоровья и маны, которая накладывает штрафы на персонажа.

**ВАЖНО**: Вся боевая логика должна быть в `battle.rpy`. В `script.rpy` только вызовы `start_battle()` и переходы к битве.

Основные механики:
- Максимальные значения HP/MP
- Статусы переполнения с постепенным снятием
- Система щитов и защиты
- Лечение с риском переполнения
- Пошаговая боевая система
- Разные типы противников (гоблин, орк, тролль) 